---
meta:
  name:     (( param "Please name your pipeline" ))
  release:  (( grab meta.name ))
  target:   (( param "Please identify the name of the target Concourse CI" ))
  url:      (( param "Please identify the full url of Concourse CI" ))
  pipeline: (( grab meta.name ))
  github:
    repo:         (( grab meta.name ))
    uri:          (( concat "git@github.com:" meta.github.owner "/" meta.github.repo ))
    owner:        (( param "Please specify the name of the user / organization that owns the Github repository" ))
    branch:       master
    private_key:  (( param "Please generate an SSH Deployment Key for this repo and specify it here" ))
    access_token: (( param "Please generate a Personal Access Token and specify it here" ))
  docker:
    email:      (( param "Please specify the email address for your Dockerhub account" ))
    username:   (( param "Please specify the username for your Dockerhub account" ))
    password:   (( param "Please specify the password for your Dockerhub account" ))
    repository: (( param "Please specify the name of the image (repo/name) that you are building" ))

  nomad:
    url:  (( param "Please specify the uri for your nomad cluster" ))
  slack:
    webhook:      (( param "Please specify your Slack Incoming Webhook Integration URL" ))

groups:
  - name: (( grab meta.name ))
    jobs:
      - bump_minor
      - bump_major
      - quality-develop
      - quality-master
      - test-develop
      - test-master
      - build-develop
      - build-master
      - push
      - deploy

jobs:
  # manually triggered version bumps
  - name: bump_minor
    plan:
      - { get: version, trigger: false }
      - { put: version, params: {bump: minor} }

  - name: bump_major
    plan:
      - { get: version, trigger: false }
      - { put: version, params: {bump: major} }

  - name: quality-develop
    plan:
      - get: develop
        trigger: true
      - put: sonar
        params:
          project_path: develop
        on_failure:
          put: notify
          params:
            text: "quality-develop failed *$BUILD_PIPELINE_NAME* \
                  $ATC_EXTERNAL_URL/builds/$BUILD_ID"

  - name: quality-master
    plan:
      - get: master
        trigger: true
      - put: sonar
        params:
          project_path: master
        on_failure:
          put: notify
          params:
            text: "quality-master failed *$BUILD_PIPELINE_NAME* \
                  $ATC_EXTERNAL_URL/builds/$BUILD_ID"

  - name: build-develop
    plan:
      - get: develop
        passed: [quality-develop]
        trigger: true
      - put: edge 
        params:  
          build: develop
          tag: develop/ci/edge                             
        on_failure:
          put: notify
          params:
            text: "build-develop failed *$BUILD_PIPELINE_NAME* \
                  $ATC_EXTERNAL_URL/builds/$BUILD_ID"
      - put: notify
        params:
          text: "built edge *$BUILD_PIPELINE_NAME* \
                $ATC_EXTERNAL_URL/builds/$BUILD_ID"

  - name: build-master
    plan:
      - get: master
        passed: [quality-master]
        trigger: true
      - put: edge 
        params:  
          build: master
          tag: version/number                                 
        on_failure:
          put: notify
          params:
            text: "build-master failed *$BUILD_PIPELINE_NAME* \
                  $ATC_EXTERNAL_URL/builds/$BUILD_ID"
      - put: notify
        params:
          text: "built master *$BUILD_PIPELINE_NAME* \
                $ATC_EXTERNAL_URL/builds/$BUILD_ID"

  - name: test-develop
    plan:
      - get: edge
        params: { save: true } 
        passed: [build-develop]
        trigger: true
      - task: test
        privileged: true
        config:
          platform: linux
          image_resource:
            type: docker-image
            source: { repository: thecase/dcind }
          inputs:
            - name: edge
          run:
            path: sh
            args: 
             - -exc
             - |
               source /docker-lib.sh
               start_docker
               docker load -i edge/image 
               docker tag "$(cat edge/image-id)" test-image:edge 
               docker run -d --net=host test-image:edge
               sleep 3
               curl http://localhost:5000 | grep "site index" && echo "test passed"
        on_failure:
          put: notify
          params:
            text: "test edge failed *$BUILD_PIPELINE_NAME* \
                  $ATC_EXTERNAL_URL/builds/$BUILD_ID"
      - put: notify
        params:
          text: "test edge passed *$BUILD_PIPELINE_NAME* \
                $ATC_EXTERNAL_URL/builds/$BUILD_ID"

  - name: test-master
    plan:
      - get: edge
        params: { save: true } 
        passed: [build-master]
        trigger: true
      - task: test
        privileged: true
        config:
          platform: linux
          image_resource:
            type: docker-image
            source: { repository: thecase/dcind }
          inputs:
            - name: edge
          run:
            path: sh
            args: 
             - -exc
             - |
               source /docker-lib.sh
               start_docker
               docker load -i edge/image 
               docker tag "$(cat edge/image-id)" test-image:edge 
               docker run -d --net=host test-image:edge
               sleep 3
               curl http://localhost:5000 | grep "site index" && echo "test passed"

        on_failure:
          put: notify
          params:
            text: "test master failed *$BUILD_PIPELINE_NAME* \
                  $ATC_EXTERNAL_URL/builds/$BUILD_ID"
      - put: notify
        params:
          text: "test master passed *$BUILD_PIPELINE_NAME* \
                $ATC_EXTERNAL_URL/builds/$BUILD_ID"

  - name: push
    serial: true
    plan:
      - { get: edge, passed: [test-master], params: { save: true } , trigger: true }     

      - put: version
        params:
          bump: patch

      # tags as latest
      - put: latest 
        params: 
          load: edge
                                                              
      - put: notify
        params:
          text: "pushed *$BUILD_PIPELINE_NAME* \
                $ATC_EXTERNAL_URL/builds/$BUILD_ID"

  - name: deploy                                              
    serial: true
    plan:                                                     
      - aggregate:                                            
        - { get: latest, passed: [push], trigger: true  }
        - { get: master, trigger: false  }  # for nomad.hcl file               
      - put: nomad                                            
        params:                                               
          job_path: master/nomad.hcl                             
      - put: notify                                           
        params:                                               
          text: "deployed *$BUILD_PIPELINE_NAME* \            
                $ATC_EXTERNAL_URL/builds/$BUILD_ID"           

resource_types:
  - name: concourse-git-semver-tag
    type: docker-image
    source:
      repository: laurentverbruggen/concourse-git-semver-tag-resource

  - name: nomad
    type: docker-image
    source:
      repository: aretelabs/nomad-resource
      tag: latest

  - name: sonar-runner
    type: docker-image
    source:
      repository: cathive/concourse-sonarqube-resource
      tag: 0.0.18 

  - name: slack-notification
    type: docker-image
    source:
      repository: cfcommunity/slack-notification-resource
      tag: latest

resources:
  - name: develop
    type: git
    source:
      uri: (( grab meta.github.uri ))
      private_key: (( grab meta.github.private_key ))
      branch: develop

  - name: master
    type: git
    source:
      uri: (( grab meta.github.uri ))
      private_key: (( grab meta.github.private_key ))
      branch: master 

  - name: edge
    type: docker-image
    source:
      .: (( inject meta.docker ))

  - name: latest
    type: docker-image
    source:
      .: (( inject meta.docker ))
      tag: latest

  - name: nomad
    type: nomad
    source:
      url: (( grab meta.nomad.url ))
      name: (( grab meta.name ))

  - name: sonar
    type: sonar-runner
    source: 
      host_url: http://sonarqube.service/
      login: (( grab meta.sonarqube.token ))
      project_key: com.tec.(( grab meta.name ))
      branch: master

  - name: version
    type: concourse-git-semver-tag
    source:
      private_key: (( grab meta.github.private_key ))
      uri: (( grab meta.github.uri ))
      branch: master

 #  - name: version
 #    type: semver
 #    source:
 #      driver: git
 #      uri: (( grab meta.github.uri ))
 #      private_key: (( grab meta.github.private_key ))
 #      branch: version
 #      file: version
 #      initial_version: (( grab meta.initial_version || "0.0.1" ))

  - name: notify
    type: slack-notification
    source:
      url: (( grab meta.slack.webhook ))

